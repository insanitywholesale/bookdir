// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookDirServiceClient is the client API for BookDirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookDirServiceClient interface {
	GetAllBooks(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*BookList, error)
	AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*BookList, error)
}

type bookDirServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookDirServiceClient(cc grpc.ClientConnInterface) BookDirServiceClient {
	return &bookDirServiceClient{cc}
}

func (c *bookDirServiceClient) GetAllBooks(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/bookdir.v1.BookDirService/GetAllBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookDirServiceClient) AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/bookdir.v1.BookDirService/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookDirServiceServer is the server API for BookDirService service.
// All implementations must embed UnimplementedBookDirServiceServer
// for forward compatibility
type BookDirServiceServer interface {
	GetAllBooks(context.Context, *NoArguments) (*BookList, error)
	AddBook(context.Context, *Book) (*BookList, error)
	mustEmbedUnimplementedBookDirServiceServer()
}

// UnimplementedBookDirServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookDirServiceServer struct {
}

func (UnimplementedBookDirServiceServer) GetAllBooks(context.Context, *NoArguments) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBooks not implemented")
}
func (UnimplementedBookDirServiceServer) AddBook(context.Context, *Book) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookDirServiceServer) mustEmbedUnimplementedBookDirServiceServer() {}

// UnsafeBookDirServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookDirServiceServer will
// result in compilation errors.
type UnsafeBookDirServiceServer interface {
	mustEmbedUnimplementedBookDirServiceServer()
}

func RegisterBookDirServiceServer(s grpc.ServiceRegistrar, srv BookDirServiceServer) {
	s.RegisterService(&BookDirService_ServiceDesc, srv)
}

func _BookDirService_GetAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookDirServiceServer).GetAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookdir.v1.BookDirService/GetAllBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookDirServiceServer).GetAllBooks(ctx, req.(*NoArguments))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookDirService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookDirServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookdir.v1.BookDirService/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookDirServiceServer).AddBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

// BookDirService_ServiceDesc is the grpc.ServiceDesc for BookDirService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookDirService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookdir.v1.BookDirService",
	HandlerType: (*BookDirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBooks",
			Handler:    _BookDirService_GetAllBooks_Handler,
		},
		{
			MethodName: "AddBook",
			Handler:    _BookDirService_AddBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookdir/v1/bookdir.proto",
}
